{"version":3,"file":"main.minified.js","sources":["../../node_modules/browserify/node_modules/browser-pack/_prelude.js","../../www/js/main.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// $(function () {\n// \t$('.bg-hover').hover(function () {\n// \t\tvar bg = $(this).attr('bg-hover');\n// \t\t$('body').css('background-image', 'url(images/' + bg + '.gif)');\n// \t}, function () {\n// \t\t$('body').css('background-image', '');\n// \t});\n\n// \tvar $left = $('.screen-slider__left').find('.screen');\n// \tvar $right = $('.screen-slider__right').find('.screen');\n\n// \tvar i = 0;\n\n// \trecursive();\n// \tsetInterval(recursive, 9000);\n\n// \tfunction recursive() {\n// \t\t$left.removeClass('showing').eq(i).addClass('showing');\n// \t\t$right.removeClass('showing').eq(i).addClass('showing');\n// \t\ti = (++i % $left.length);\n// \t\tvar gifify = $('#gifify');\n// \t\tif (gifify.hasClass('showing')) {\n// \t\t\tgifify.attr('src', 'images/phone-screen-2-after.gif');\n// \t\t} else {\n// \t\t\tsetTimeout(function () {\n// \t\t\t\tgifify.attr('src', 'images/phone-screen-2-after.png');\n// \t\t\t}, 2000);\n// \t\t}\n// \t}\n// });\n// The MIT License (MIT)\n\n// Typed.js | Copyright (c) 2014 Matt Boldt | www.mattboldt.com\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n\n! function($) {\n\n    \"use strict\";\n\n    var Typed = function(el, options) {\n\n        // chosen element to manipulate text\n        this.el = $(el);\n\n        // options\n        this.options = $.extend({}, $.fn.typed.defaults, options);\n\n        // attribute to type into\n        this.isInput = this.el.is('input');\n        this.attr = this.options.attr;\n\n        // show cursor\n        this.showCursor = this.isInput ? false : this.options.showCursor;\n\n        // text content of element\n        this.elContent = this.attr ? this.el.attr(this.attr) : this.el.text()\n\n        // html or plain text\n        this.contentType = this.options.contentType;\n\n        // typing speed\n        this.typeSpeed = this.options.typeSpeed;\n\n        // add a delay before typing starts\n        this.startDelay = this.options.startDelay;\n\n        // backspacing speed\n        this.backSpeed = this.options.backSpeed;\n\n        // amount of time to wait before backspacing\n        this.backDelay = this.options.backDelay;\n\n        // div containing strings\n        this.stringsElement = this.options.stringsElement;\n\n        // input strings of text\n        this.strings = this.options.strings;\n\n        // character number position of current string\n        this.strPos = 0;\n\n        // current array position\n        this.arrayPos = 0;\n\n        // number to stop backspacing on.\n        // default 0, can change depending on how many chars\n        // you want to remove at the time\n        this.stopNum = 0;\n\n        // Looping logic\n        this.loop = this.options.loop;\n        this.loopCount = this.options.loopCount;\n        this.curLoop = 0;\n\n        // for stopping\n        this.stop = false;\n\n        // custom cursor\n        this.cursorChar = this.options.cursorChar;\n\n        // shuffle the strings\n        this.shuffle = this.options.shuffle;\n        // the order of strings\n        this.sequence = [];\n\n        // All systems go!\n        this.build();\n    };\n\n    Typed.prototype = {\n\n        constructor: Typed\n\n        ,\n        init: function() {\n            // begin the loop w/ first current string (global self.strings)\n            // current string will be passed as an argument each time after this\n            var self = this;\n            self.timeout = setTimeout(function() {\n                for (var i=0;i<self.strings.length;++i) self.sequence[i]=i;\n\n                // shuffle the array if true\n                if(self.shuffle) self.sequence = self.shuffleArray(self.sequence);\n\n                // Start typing\n                self.typewrite(self.strings[self.sequence[self.arrayPos]], self.strPos);\n            }, self.startDelay);\n        }\n\n        ,\n        build: function() {\n            var self = this;\n            // Insert cursor\n            if (this.showCursor === true) {\n                this.cursor = $(\"<span class=\\\"typed-cursor\\\">\" + this.cursorChar + \"</span>\");\n                this.el.after(this.cursor);\n            }\n            if (this.stringsElement) {\n                self.strings = [];\n                this.stringsElement.hide();\n                var strings = this.stringsElement.find('p');\n                $.each(strings, function(key, value){\n                    self.strings.push($(value).html());\n                });\n            }\n            this.init();\n        }\n\n        // pass current string state to each function, types 1 char per call\n        ,\n        typewrite: function(curString, curStrPos) {\n            // exit when stopped\n            if (this.stop === true) {\n                return;\n            }\n\n            // varying values for setTimeout during typing\n            // can't be global since number changes each time loop is executed\n            var humanize = Math.round(Math.random() * (100 - 30)) + this.typeSpeed;\n            var self = this;\n\n            // ------------- optional ------------- //\n            // backpaces a certain string faster\n            // ------------------------------------ //\n            // if (self.arrayPos == 1){\n            //  self.backDelay = 50;\n            // }\n            // else{ self.backDelay = 500; }\n\n            // contain typing function in a timeout humanize'd delay\n            self.timeout = setTimeout(function() {\n                // check for an escape character before a pause value\n                // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n                // single ^ are removed from string\n                var charPause = 0;\n                var substr = curString.substr(curStrPos);\n                if (substr.charAt(0) === '^') {\n                    var skip = 1; // skip atleast 1\n                    if (/^\\^\\d+/.test(substr)) {\n                        substr = /\\d+/.exec(substr)[0];\n                        skip += substr.length;\n                        charPause = parseInt(substr);\n                    }\n\n                    // strip out the escape character and pause value so they're not printed\n                    curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);\n                }\n\n                if (self.contentType === 'html') {\n                    // skip over html tags while typing\n                    var curChar = curString.substr(curStrPos).charAt(0)\n                    if (curChar === '<' || curChar === '&') {\n                        var tag = '';\n                        var endTag = '';\n                        if (curChar === '<') {\n                            endTag = '>'\n                        } else {\n                            endTag = ';'\n                        }\n                        while (curString.substr(curStrPos).charAt(0) !== endTag) {\n                            tag += curString.substr(curStrPos).charAt(0);\n                            curStrPos++;\n                        }\n                        curStrPos++;\n                        tag += endTag;\n                    }\n                }\n\n                // timeout for any pause after a character\n                self.timeout = setTimeout(function() {\n                    if (curStrPos === curString.length) {\n                        // fires callback function\n                        self.options.onStringTyped(self.arrayPos);\n\n                        // is this the final string\n                        if (self.arrayPos === self.strings.length - 1) {\n                            // animation that occurs on the last typed string\n                            self.options.callback();\n\n                            self.curLoop++;\n\n                            // quit if we wont loop back\n                            if (self.loop === false || self.curLoop === self.loopCount)\n                                return;\n                        }\n\n                        self.timeout = setTimeout(function() {\n                            self.backspace(curString, curStrPos);\n                        }, self.backDelay);\n                    } else {\n\n                        /* call before functions if applicable */\n                        if (curStrPos === 0)\n                            self.options.preStringTyped(self.arrayPos);\n\n                        // start typing each new char into existing string\n                        // curString: arg, self.el.html: original text inside element\n                        var nextString = curString.substr(0, curStrPos + 1);\n                        if (self.attr) {\n                            self.el.attr(self.attr, nextString);\n                        } else {\n                            if (self.isInput) {\n                                self.el.val(nextString);\n                            } else if (self.contentType === 'html') {\n                                self.el.html(nextString);\n                            } else {\n                                self.el.text(nextString);\n                            }\n                        }\n\n                        // add characters one by one\n                        curStrPos++;\n                        // loop the function\n                        self.typewrite(curString, curStrPos);\n                    }\n                    // end of character pause\n                }, charPause);\n\n                // humanized value for typing\n            }, humanize);\n\n        }\n\n        ,\n        backspace: function(curString, curStrPos) {\n            // exit when stopped\n            if (this.stop === true) {\n                return;\n            }\n\n            // varying values for setTimeout during typing\n            // can't be global since number changes each time loop is executed\n            var humanize = Math.round(Math.random() * (100 - 30)) + this.backSpeed;\n            var self = this;\n\n            self.timeout = setTimeout(function() {\n\n                // ----- this part is optional ----- //\n                // check string array position\n                // on the first string, only delete one word\n                // the stopNum actually represents the amount of chars to\n                // keep in the current string. In my case it's 14.\n                // if (self.arrayPos == 1){\n                //  self.stopNum = 14;\n                // }\n                //every other time, delete the whole typed string\n                // else{\n                //  self.stopNum = 0;\n                // }\n\n                if (self.contentType === 'html') {\n                    // skip over html tags while backspacing\n                    if (curString.substr(curStrPos).charAt(0) === '>') {\n                        var tag = '';\n                        while (curString.substr(curStrPos).charAt(0) !== '<') {\n                            tag -= curString.substr(curStrPos).charAt(0);\n                            curStrPos--;\n                        }\n                        curStrPos--;\n                        tag += '<';\n                    }\n                }\n\n                // ----- continue important stuff ----- //\n                // replace text with base text + typed characters\n                var nextString = curString.substr(0, curStrPos);\n                if (self.attr) {\n                    self.el.attr(self.attr, nextString);\n                } else {\n                    if (self.isInput) {\n                        self.el.val(nextString);\n                    } else if (self.contentType === 'html') {\n                        self.el.html(nextString);\n                    } else {\n                        self.el.text(nextString);\n                    }\n                }\n\n                // if the number (id of character in current string) is\n                // less than the stop number, keep going\n                if (curStrPos > self.stopNum) {\n                    // subtract characters one by one\n                    curStrPos--;\n                    // loop the function\n                    self.backspace(curString, curStrPos);\n                }\n                // if the stop number has been reached, increase\n                // array position to next string\n                else if (curStrPos <= self.stopNum) {\n                    self.arrayPos++;\n\n                    if (self.arrayPos === self.strings.length) {\n                        self.arrayPos = 0;\n\n                        // Shuffle sequence again\n                        if(self.shuffle) self.sequence = self.shuffleArray(self.sequence);\n\n                        self.init();\n                    } else\n                        self.typewrite(self.strings[self.sequence[self.arrayPos]], curStrPos);\n                }\n\n                // humanized value for typing\n            }, humanize);\n\n        }\n        /**\n         * Shuffles the numbers in the given array.\n         * @param {Array} array\n         * @returns {Array}\n         */\n        ,shuffleArray: function(array) {\n            var tmp, current, top = array.length;\n            if(top) while(--top) {\n                current = Math.floor(Math.random() * (top + 1));\n                tmp = array[current];\n                array[current] = array[top];\n                array[top] = tmp;\n            }\n            return array;\n        }\n\n        // Start & Stop currently not working\n\n        // , stop: function() {\n        //     var self = this;\n\n        //     self.stop = true;\n        //     clearInterval(self.timeout);\n        // }\n\n        // , start: function() {\n        //     var self = this;\n        //     if(self.stop === false)\n        //        return;\n\n        //     this.stop = false;\n        //     this.init();\n        // }\n\n        // Reset and rebuild the element\n        ,\n        reset: function() {\n            var self = this;\n            clearInterval(self.timeout);\n            var id = this.el.attr('id');\n            this.el.after('<span id=\"' + id + '\"/>')\n            this.el.remove();\n            if (typeof this.cursor !== 'undefined') {\n                this.cursor.remove();\n            }\n            // Send the callback\n            self.options.resetCallback();\n        }\n\n    };\n\n    $.fn.typed = function(option) {\n        return this.each(function() {\n            var $this = $(this),\n                data = $this.data('typed'),\n                options = typeof option == 'object' && option;\n            if (!data) $this.data('typed', (data = new Typed(this, options)));\n            if (typeof option == 'string') data[option]();\n        });\n    };\n\n    $.fn.typed.defaults = {\n        strings: [\"These are the default values...\", \"You know what you should do?\", \"Use your own!\", \"Have a great day!\"],\n        stringsElement: null,\n        // typing speed\n        typeSpeed: 0,\n        // time before typing starts\n        startDelay: 0,\n        // backspacing speed\n        backSpeed: 0,\n        // shuffle the strings\n        shuffle: false,\n        // time before backspacing\n        backDelay: 500,\n        // loop\n        loop: false,\n        // false = infinite\n        loopCount: false,\n        // show cursor\n        showCursor: true,\n        // character for cursor\n        cursorChar: \"|\",\n        // attribute to type (null == text)\n        attr: null,\n        // either html or text\n        contentType: 'html',\n        // call when done callback function\n        callback: function() {},\n        // starting callback function before each string\n        preStringTyped: function() {},\n        //callback for every typed string\n        onStringTyped: function() {},\n        // callback for reset\n        resetCallback: function() {}\n    };\n\n\n}(window.jQuery);\n\n$(function(){\n\n    $(\"#typed\").typed({\n        stringsElement: $('#typed-strings'),\n        typeSpeed: 30,\n        backDelay: 4000,\n        loop: true,\n        contentType: 'html',\n        loopCount: false,\n        callback: function(){ foo(); },\n        resetCallback: function() { newTyped(); }\n    });\n\n    $(\".reset\").click(function(){\n        $(\"#typed\").typed('reset');\n    });\n\n});\n\nfunction newTyped(){ /* A new typed object */ }\n\nfunction foo(){ console.log(\"Callback\"); }"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","newTyped","foo","$","Typed","el","options","this","extend","fn","typed","defaults","isInput","is","attr","showCursor","elContent","text","contentType","typeSpeed","startDelay","backSpeed","backDelay","stringsElement","strings","strPos","arrayPos","stopNum","loop","loopCount","curLoop","stop","cursorChar","shuffle","sequence","build","prototype","constructor","init","self","timeout","setTimeout","shuffleArray","typewrite","cursor","after","hide","find","each","key","value","push","html","curString","curStrPos","humanize","Math","round","random","charPause","substr","charAt","skip","test","exec","parseInt","substring","curChar","tag","endTag","onStringTyped","callback","backspace","preStringTyped","nextString","val","array","tmp","current","top","floor","reset","clearInterval","id","remove","resetCallback","option","$this","data","window","jQuery","click"],"mappings":"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"}